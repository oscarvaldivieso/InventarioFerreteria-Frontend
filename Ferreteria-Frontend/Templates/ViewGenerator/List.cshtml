@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @GetEnumerableTypeExpression(Model.ViewDataTypeName)

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
        //    PushIndent("    ");
    }
    string titulo = Model.ViewDataTypeShortName.Substring(2);
    string titulo2 = Model.ViewDataTypeShortName + "ViewModel()";
@:<div class="col-sm-12">
    @:<div class="card">
        @:<div class="card-body">
            @:<div class="list-product-header">
                @:<div class="light-box"></div>
                    @:<button type="button" class="btn btn-rounded btn-outline-primary btn-md" id="ModalNuevo"><i class="fa fa-plus"></i> Agregar #Nombretabla</a></button>
            @:</div>
            @:<div class="list-product list-category">
                @:<table class="table table-striped table-bordered" id="tablaIndex">
                    @:<thead>
                        @:<tr>
                        Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
                        Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);
                            //Columna de acciones
                            @:<th style="width:10%">
                                @:Acciones
                            @:</th>
                        foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
                        {
                            if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                                && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey
                                && !item.Name.Contains("Fecha") && !item.Name.Contains("Estado"))
                            {
                            <th>
                                @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                            </th>
                            }
                            else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation)
                                && !item.Name.Contains("Usua"))
                            {
                            <th>
                                @@Html.DisplayNameFor(model => model.@GetValueExpression(navigation))
                            </th>
                            }
                        }
                        @:</tr>
                    @:</thead>
                    @:<tbody>
                @:@@foreach (var item in Model) {
                        @:<tr>
                        //Botenes de acciones
                        string pkName = GetPrimaryKeyName();
                        if (pkName != null)
                        {
                            @:<td>
                                @:<div class="btn-group">
                                    @:<button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        @:<i class="fas fa-cogs"></i> Acciones
                                    @:</button>
                                    @:<ul class="dropdown-menu dropdown-block" style="">
                                        @:<a class="dropdown-item" href="javascript:void(0);" onclick="editar(@@item.@pkName)">
                                            @:<i class="fa fa-edit"></i> Editar
                                        @:</a>
                                        @:<a asp-action="Details" asp-route-id="@@item.@pkName" class="dropdown-item">
                                        @:<i class="fas fa-info"></i> Detalles</a>
                                        @:<a class="dropdown-item" href="javascript:void(0);" onclick="eliminar(@@item.@pkName)">
                                            @:<i class="fa fa-edit"></i> Eliminar
                                        @:</a>
                                        @:<li><a class="dropdown-item" href="#">Crypto</a></li>
                                    @:</ul>
                                @:</div>
                            @:</td>
                        }
                        else
                        {
                            <td>
                                @@Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
                                @@Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
                                @@Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
                            </td>
                        }
                        foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
                        {
                            if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                                && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey
                                && !item.Name.Contains("Feca") && !item.Name.Contains("Estado"))
                            {
                            <td>
                                @@Html.DisplayFor(modelItem => item.@GetValueExpression(property))
                            </td>
                            }
                            else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation)
                                && !item.Name.Contains("Usua"))
                            {
                            <td>
                                @@Html.DisplayFor(modelItem => item.@GetValueExpression(navigation).@navigation.DisplayPropertyName)
                            </td>
                            }
                        }                
                        @:</tr>
                @:}
                    @:</tbody>
        
                @:</table>
            @:</div>
                
        @:</div>
@:</div>
@:
@:<div class="modal fade modal-bookmark" tabindex="-1" role="dialog" id="modalInsertar">
    @:<div class="modal-dialog modal-md" role="document">
        @:<div class="modal-content">
            @:<div class="modal-header">
                @:<h5 class="modal-title">Insertar un departamento</h5>
            @:</div>
            @:<div class="modal-body p-0">
                @:<partial name="_Create" model="new GestionGimnasio.Models.@titulo2"/>
            @:</div>
        @:</div>
    @:</div>
@:</div>
@:
@:<div class="modal fade modal-bookmark" tabindex="-1" role="dialog" id="modalEditar">
    @:<div class="modal-dialog modal-md" role="document">
        @:<div class="modal-content">
            @:<div class="modal-header">
                @:<h5 class="modal-title">Editar un departamento</h5>
            @:</div>
            @:<div class="modal-body p-0" id="modalbody">
                @:<partial name="_Edit" model="new GestionGimnasio.Models.@titulo2"/>
            @:</div>
        @:</div>
    @:</div>
@:</div>
@:</div>
@:
@:<script src="~/js/jquery.min.js"></script>
@:<script src="~/js/sweet-alert/sweetalert.min.js"></script>
@:<script src="~/js/js-datatables/simple-datatables@latest.js"></script>
@:<script src="~/js/datatable/datatables/jquery.dataTables.min.js"></script>
@:<script>
@:    $(document).ready(function(){
@:        $("#tablaIndex").DataTable();
@:    });


@:      //modal abrir
@:    $("#ModalNuevo").click(function () {
@:       $("#modalInsertar").modal({ backdrop: 'static', keyboard: false });
@:       $("#modalInsertar").modal('show');
@:     });
 @:       
@:      $("#btnCerrarCrear").click(function() {
@:        $("#modalInsertar").modal('hide');
@:        location.reload();
@:      });
@:        
@:
@:    //modal editar
@:    function editar(id){
@:        var url = "/@titulo/Edit/" + id;
@:        $("#modalBody").load(url, function () {
@:           $("#modalEditar").modal({ backdrop: 'static', keyboard: false });
@:            $("#modalEditar").modal('show');
@:        });
@:    }
@:
@:	//eliminar
@:    function eliminar(id) {
@:        localStorage.setItem("@pkName", id);
@:            swal({
@:                icon : "error",
@:                title: 'Eliminar',
@:                text: "¿Deseas eliminar este registro?",
@:                type: 'warning',
@:                buttons:{
@:                    confirm: {
@:                        text : 'Si, eliminar',
@:                        className : 'btn btn-danger'
@:                    },
@:                    cancel: {
@:                        visible: true,
@:                        className: 'btn btn-danger btn-border'
@:                    }
@:                }
@:            }).then((Delete) => {
@:                if (Delete) {
@:                    var id = localStorage.getItem("@pkName");
@:                    var url = "/@titulo/Delete/" + id;
@:                    location.href = url;
@:                } else {
@:                    swal.close();
@:                }
@:            });
@:    }
 @:   
 @:
@:       $(document).on('click', '#btnCerrarEditar', function() {
 @:       $("#modalEditar").modal('hide');
 @:   });
@:</script>
    if(!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
        //ClearIndent();
@:</body>
@:</html>
    }
}
@functions
{
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }

    string GetEnumerableTypeExpression(string typeName)
    {
        return "IEnumerable<" + typeName + ">";
    }
}
