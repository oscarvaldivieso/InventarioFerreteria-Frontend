@model IEnumerable<CompraViewModel>

@{
    ViewData["Title"] = "Reporte Compra";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-md-4">
        <label class="control-label">Fecha Inicio:</label>
        <input type="date" id="fechaInicio" class="form-control btn btn-warning rounded-pill" />
        <br />
    </div>
    <div class="col-md-4">
        <label class="control-label">Fecha Fin:</label>
        <input type="date" id="fechaFin" class="form-control btn btn-warning rounded-pill" />
        <br />
    </div>
    <div class="col-md-4">
        <label class="control-label">&nbsp;</label>
        <button id="filtrarButton" class="btn btn-primary form-control">Filtrar</button>
    </div>
    <br>
</div>

<iframe id="pdfPreview" width="100%" height="500px"></iframe>

<!-- Scripts necesarios para jsPDF -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.13/jspdf.plugin.autotable.min.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.getElementById("filtrarButton").addEventListener("click", generarVistaPrevia);
        console.log("DOM loaded, event listener added");
    });

    function generarVistaPrevia() {
        console.log("Generating preview...");
        var fechaInicio = document.getElementById("fechaInicio").value;
        var fechaFin = document.getElementById("fechaFin").value;


        console.log("Fetching data for dates:", fechaInicio, fechaFin);
        fetch(`/Home/ObtenerCompra?FechaInicio=${fechaInicio}&FechaFin=${fechaFin}`)
            .then(response => {
                console.log("Response received:", response);
                return response.json();
            })
            .then(data => {
                console.log("Data received:", data);
                if (data.error) {
                    '@TempData["MensajeError"] = "Error al generar reporte"';
                    return;
                }

                if (!data.compras || data.compras.length === 0) {
                    '@TempData["MensajeError"] = "Error al generar reporte"';
                    return;
                }

                var { jsPDF } = window.jspdf;
                var doc = new jsPDF();

                var usuarioSesion = "@ViewBag.UsuarioSesion";
                var fechaHoraActual = new Date().toLocaleString();

                doc.setProperties({
                    title: "Reporte de Compras",
                    subject: "Compras Filtradas",
                    author: usuarioSesion,
                    keywords: "Compras, Reporte, PDF",
                    creator: "Sistema de Gestión"
                });

                doc.addImage("@Url.Content("~/images/Logo__2_-removebg-preview.png")", "PNG", 30, 0, 29, 29);
                doc.setFontSize(16);
                doc.text("Listado de Compras", 60, 17, 0, 0);
                doc.setFontSize(12);
                doc.text(`Período: ${new Date(fechaInicio).toLocaleDateString()} - ${new Date(fechaFin).toLocaleDateString()}`, 60, 25);

                var columnas = ["ID", "Fecha", "Proveedor", "Producto", "Cantidad", "Precio", "Total"];
                var filas = data.compras.map(c => [
                    c.comp_Id,
                    new Date(c.comp_Fecha).toLocaleDateString(),
                    c.prov_Nombre,
                    c.prod_Descripcion,
                    c.cpDe_Cantidad,
                    c.cpDe_Precio.toFixed(2),
                    (c.cpDe_Cantidad * c.cpDe_Precio).toFixed(2)
                ]);

                // Calcular el total general
                var totalGeneral = data.compras.reduce((sum, c) => sum + (c.cpDe_Cantidad * c.cpDe_Precio), 0);

                doc.autoTable({
                    head: [columnas],
                    body: filas,
                    startY: 35,
                    theme: 'grid',
                    headStyles: { fillColor: [169, 143, 64], textColor: [255, 255, 255], fontStyle: 'bold' },
                    didDrawPage: function (data) {
                        var pageSize = doc.internal.pageSize;
                        var pageWidth = pageSize.width;
                        var pageHeight = pageSize.height;
                        var pageNumber = doc.internal.getNumberOfPages();

                        doc.setDrawColor(150);
                        doc.line(20, pageHeight - 25, pageWidth - 20, pageHeight - 25);

                        // Agregar total general en la última página
                        if (pageNumber === doc.internal.getNumberOfPages()) {
                            doc.setFontSize(12);
                            doc.text(`Total General: $${totalGeneral.toFixed(2)}`, pageWidth - 20, pageHeight - 30, { align: "right" });
                        }

                        doc.setFontSize(10);
                        doc.text(`Generado por: ${usuarioSesion}`, 20, pageHeight - 15);
                        doc.text(`Fecha y Hora: ${fechaHoraActual}`, pageWidth / 2, pageHeight - 15, { align: "center" });
                        doc.text(`Página ${pageNumber}`, pageWidth - 20, pageHeight - 15, { align: "right" });
                    }
                });

                var pdfBlob = doc.output("blob");
                var pdfUrl = URL.createObjectURL(pdfBlob);
                document.getElementById("pdfPreview").src = pdfUrl;

                window.generatedPDF = doc;
            })
            .catch(error => {
                    '@TempData["MensajeError"] = "Error al generar reporte"';
            });
    }
</script>